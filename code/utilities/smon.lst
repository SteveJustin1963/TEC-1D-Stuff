# File /Users/slarti/Documents/TEC1D/TEC-1D-Stuff/code/smon.z80
0000			;SMON - Simple Monitor - Written by J Robinson 
0000			;--------------------------------------------- 
0000			 
0000			; The S(imple)MON as its name suggests, is a very simple monitor. In fact it is only 
0000			; just enough to allow you to view, alter, and run your own programs. 
0000			;  
0000			; SMON VARIBLES 
0000			; SMON has only two varibles. They are the CONTROL BYTE and the RAM pointer. 
0000			; The control byte flags between the two operating modes, ADDRESS and DATA, 
0000			; by the state of bit 4. If bit 4 is a logic 1 then SMON is in the ADDRESS mode. 
0000			; If it is a zero then SMON is in the DATA mode. No other bits are used in the 
0000			; control byte. The control byte is stored at 0x0F08. 
0000			; The RAM pointer holds the address of the RAM location the SMON is currently 
0000			; displaying. The RAM pointer is stored at 0x0F06. 
0000			; 
0000			; Designed for the TEC and to be placed in ROM at 0x0000 
0000			; 
0000			;Main Code 
0000			 
0000			            ORG     0000H  
0000			START: 
0000 31 00 10		            LD      SP,1000H			;Set stack pointer 
0003 21 00 08		            LD      HL,0800H			;Set RAM address 
0006 22 06 0f		            LD      (PTR_BUFF),HL 		;Point to RAM 
0009 cd c1 00		            CALL    RESET_TONES 		;Make a double tone for RESET 
000c			 
000c			CLR_CON_BYT: 
000c af			            XOR     A 					;Clear Control Byte 
000d			 
000d			STR_CON_BYT: 
000d 32 08 0f		            LD      (CONT_BUFF),A       ;Store Control Byte 
0010			 
0010			CLR_KEY_FLG: 
0010 3e ff		            LD      A,0FFH              ;Clears interrupt register 
0012 ed 47		            LD      I,A                 ;Key stored address 
0014 2a 06 0f		            LD      HL,(PTR_BUFF)       ;Load current address 
0017 cd 8b 00		            CALL    CON_HL_A            ;Convert HL to Segment Display  
001a cd ab 00		            CALL    SET_DOTS            ;Set Control Byte Dots 
001d			 
001d			KEY_LOOP: 
001d cd 70 00		            CALL    SCAN                ;Multiplex the display 
0020 ed 57		            LD      A,I                 ;See if key hit 
0022 fe ff		            CP      0FFH                ;If not FF then a key has been pressed 
0024 28 f7		            JR      Z,KEY_LOOP 
0026 f5			            PUSH    AF                  ;Save Key hit to play tone 
0027 cd c4 00		            CALL    KEY_TONE 
002a f1			            POP     AF 
002b 2a 06 0f		            LD      HL,(PTR_BUFF)       ;Load current address 
002e cb 67		            BIT     4,A                 ;Check if key pressed in +,-,GO or AD 
0030 28 1d		            JR      Z,DAT_KEY_PROC      ;Process keys 0-F 
0032			 
0032			CP_PLUS: 
0032 fe 10		            CP      10H                 ;Check '+' Key 
0034 20 06		            JR      NZ,CP_MINUS 
0036 23			            INC     HL                  ;Increment next adddress 
0037			 
0037			PTR_UPDATE: 
0037 22 06 0f		            LD      (PTR_BUFF),HL       ;Save new address in buffer 
003a 18 d4		            JR      CLR_KEY_FLG         ;Redisplay and Key check 
003c			 
003c			CP_MINUS: 
003c fe 11		            CP      11H                 ;Check '-' Key 
003e 20 03		            JR      NZ,CP_GO 
0040 2b			            DEC     HL                  ;Increment next adddress 
0041 18 f4		            JR      PTR_UPDATE          ;Save HL and return 
0043			 
0043			CP_GO: 
0043 fe 12		            CP      12H                 ;Check 'GO' Key 
0045 20 01		            JR      NZ,AD_KEY 
0047 e9			            JP      (HL)                ;Set PC to value at HL (Run it) 
0048			 
0048			AD_KEY:                                 ;If here must be AD key pressed 
0048 3a 08 0f		            LD      A,(CONT_BUFF)       ;Check the state of the Control Byte 
004b ee 10		            XOR     10H                  ;Flip Bit 4 to change state 
004d 18 be		            JR      STR_CON_BYT         ;Store control byte and redisplay 
004f			 
004f			DAT_KEY_PROC:                           ;Process Data keys based on control byte 
004f 47			            LD      B,A                 ;Save Key pressed 
0050 3a 08 0f		            LD      A,(CONT_BUFF)       ;load control byte into A 
0053 cb 67		            BIT     4,A                 ;Is bit 4 set 
0055 78			            LD      A,B                 ;Restore Key pressed 
0056 20 04		            JR      NZ,D_KEY_AD_MD      ;If set Jump for ADDRESS Mode 
0058 ed 6f		            RLD                         ;Shift A (key) into Lower Nibble of RAM 
005a 18 b4		            JR      CLR_KEY_FLG         ;Redisplay and Key check 
005c			 
005c			D_KEY_AD_MD:                            ;Process Address 
005c 21 06 0f		            LD      HL,PTR_BUFF         ;Move HL to RAM address 
005f ed 6f		            RLD                         ;Shift A (key) into Lower Nibble of RAM 
0061 23			            INC     HL 
0062 ed 6f		            RLD                         ;Shift Carry bit out nibble into second 
0064 18 aa		            JR      CLR_KEY_FLG         ;Redisplay and Key check 
0066			 
0066			NMI_HANDLER:                            ;NMI at Address 0x0066 
0066 f5			            PUSH    AF                  ;Save previous A 
0067 db 00		            IN      A,(00)              ;Read Keyboard port 
0069 e6 1f		            AND     1FH                 ;Mask unwanted bits 
006b ed 47		            LD      I,A                 ;Store Key in Interrup Register 
006d f1			            POP     AF                  ;Restore A 
006e ed 45		            RETN                        ;Go back to previous code before interrupt 
0070			 
0070			;Subroutines 
0070			;Multiplex the Display 
0070			SCAN:                                   ;Multiplex the displays 
0070 06 20		            LD      B,20H               ;Segment Reference 
0072 21 00 0f		            LD      HL,DISP_BUFF        ;Set HL to Display Buffer 
0075			 
0075			SCAN_LOOP: 
0075 7e			            LD      A,(HL)              ;Get Segment Value at HL 
0076 d3 02		            OUT     (02),A              ;Set on Segment 
0078 78			            LD      A,B                 ;Get Segment reference 
0079 d3 01		            OUT     (01),A              ;Activate segment 
007b 06 80		            LD      B,80H               ;Segment delay 
007d 10 fe		D_LOOP:     DJNZ    D_LOOP 
007f 23			            INC     HL                  ;move to next location 
0080 47			            LD      B,A                 ;Save Segment reference 
0081 af			            XOR     A                   ;Clear A 
0082 d3 01		            OUT     (01),A              ;Deactivate Segment 
0084 cb 08		            RRC     B                   ;Move Segment Reference on to the Right 
0086 30 ed		            JR      NC,SCAN_LOOP        ;If not passed the last segment, scan next segment 
0088 d3 02		            OUT     (02),A              ;Clear port 2 
008a c9			            RET 
008b			 
008b			;Convert HL and A to Seven Segment Display 
008b			CON_HL_A: 
008b 01 00 0f		            LD      BC,DISP_BUFF        ;Location of display buffer  
008e 7c			            LD      A,H                 ;Get high byte of Address 
008f cd 97 00		            CALL    CON_A               ;Convert A to Segment Hex 
0092 7d			            LD      A,L                 ;Get low byte of Address 
0093 cd 97 00		            CALL    CON_A               ;Convert A to Segment Hex 
0096 7e			            LD      A,(HL)              ;Now get value at HL to convert (Data) 
0097			 
0097			CON_A: 
0097 f5			            PUSH    AF                  ;Save A to keep original value 
0098 07			            RLCA                        ;Shift upper nibble to lower for masking 
0099 07			            RLCA 
009a 07			            RLCA 
009b 07			            RLCA 
009c cd a0 00		            CALL    CON_NIBBLE          ;Convert Lower nibble to segment hex 
009f f1			            POP     AF                  ;Restore A 
00a0			 
00a0			CON_NIBBLE: 
00a0 e6 0f		            AND     0FH                 ;Only look at lower nibble for indexing 
00a2 11 d3 00		            LD      DE,DISP_COD_TAB     ;Reference Segment convert table 
00a5 83			            ADD     A,E                 ;Index table with A 
00a6 5f			            LD      E,A                 ;Update DE with index 
00a7 1a			            LD      A,(DE)              ;Look up table 
00a8 02			            LD      (BC),A              ;Save it to display buffer 
00a9 03			            INC     BC                  ;Increment buffer location 
00aa c9			            RET 
00ab			 
00ab			;Set the mode dots to address or data 
00ab			SET_DOTS:                               ;Set indicator dots to Addr or Data 
00ab 21 05 0f		            LD      HL,DISP_BUFF_END    ;Point to end of display buffer 
00ae 06 02		            LD      B,02H               ;2 Dots 
00b0 3a 08 0f		            LD      A,(CONT_BUFF)       ;Get control buffer 
00b3 cb 67		            BIT     4,A                 ;Check mode 
00b5 28 04		            JR      Z,DOT_SET           ;Jump if in Data mode 
00b7 2b			            DEC     HL                  ;Move to Address segments 
00b8 2b			            DEC     HL 
00b9 06 04		            LD      B,04H               ;4 Dots 
00bb			 
00bb			DOT_SET: 
00bb cb e6		            SET     4,(HL)              ;Set Bit 4 (0x10) on existing segment 
00bd 2b			            DEC     HL                  ;Move to next address 
00be 10 fb		            DJNZ    DOT_SET             ;Loop until done 
00c0 c9			            RET 
00c1			 
00c1			;Make a beep (or 2) 
00c1			RESET_TONES: 
00c1 cd c4 00		            CALL    KEY_TONE            ;For Reset, call KEY TONE twice 
00c4			 
00c4			KEY_TONE: 
00c4 0e 40		            LD      C,40H               ;Half cycle count 
00c6 af			            XOR     A                   ;Clear A 
00c7			 
00c7			TONE_LOOP: 
00c7 d3 01		            OUT     (01),A              ;Set or unset speaker bit 
00c9 06 40		            LD      B,40H               ;Set delay 
00cb 10 fe		TONE_DELAY: DJNZ    TONE_DELAY 
00cd ee 80		            XOR     80H                 ;Toggle speaker bit 
00cf 0d			            DEC     C                   ;Count down cycle 
00d0 20 f5		            JR      NZ,TONE_LOOP        ;Do more toning 
00d2 c9			            RET 
00d3			 
00d3			;Hex to Seven Segment lookup table 
00d3			DISP_COD_TAB: 
00d3 eb 28 cd ad 2e a7 e7 29	            DB      0EBH,28H,0CDH,0ADH,2EH,0A7H,0E7H,29H 
00db ef af 6f e6 c3 ec c7 47	            DB      0EFH,0AFH,6FH,0E6H,0C3H,0ECH,0C7H,47H 
00e3			 
00e3			PTR_BUFF:   	EQU     0F06H      		;RAM location 
00e3			CONT_BUFF:  	EQU     0F08H      		;Control byte 
00e3			DISP_BUFF:  	EQU     0F00H      		;Display buffer 
00e3			DISP_BUFF_END:	EQU     DISP_BUFF+5     ;Display buffer 
# End of file /Users/slarti/Documents/TEC1D/TEC-1D-Stuff/code/smon.z80
00e3
