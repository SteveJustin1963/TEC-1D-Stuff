; TEC Magazine Master ROM
; -----------------------
;
; This ROM is a collection of almost all of the code written for the Talking
; Electronics Computer.
;
; Compiled by Brian Chiha
; July 2020
;
; To use:
; -------
; Requires JMON Monitor for the Menu Selection and to be placed at 0x1000 in RAM.  
; Simply go to address 0x1000 and press 'GO'.  Then use '+' or '-' to select the 
; program to run and hit 'GO'. 
;
; For 8x8 LED programs, connect the 8x8 to ports 05 and 06. 
;
; To exit the programs press 'Shift-GO'.  This will exit the current program and
; go back to the main menu.
;
; ROM Contents:
; -------------



            ORG    1800H 
START:
            ; Copy Menu Data to JMON location
            LD      HL,M_DATA ; Menu data
            LD      DE,088DH ; Destination for menu/perimiter to use
            LD      BC,000BH ; Number of bytes to copy
            LDIR     ; Copy it
MENU:
            JP      0041H ; Call the menu


;Magazine Code
;-------------

;-----------------------------;
;Segment Move - Issue 11 P 26 ;
;-----------------------------;
;Move a Seven Segment Display from Right to Left and loop around
SEGMOV:               
            LD      A,01H 
            OUT     (02),A 
SML1:               
            OUT     (01),A 
            CALL    DELAY_M 
            RLCA
            CALL    CHKSHIFT     
            JR      SML1 

;------------------------------;
;Segment Cycle - Issue 11 P 20 ;
;------------------------------;
;Cycle through all 255 positions of the seven segment display
SEGCYC:               
            LD      A,3FH     ;Use All Displays
            OUT     (01),A
            XOR     B         ;Zero B
SEGC1:               
            LD      A,B
            OUT     (02),A    ;Output B
            INC     B         ;Increase B
            CALL    DELAY_Q
            CALL    CHKSHIFT     
            JR      SEGC1

;------------------------------;
;Segment Flash - Issue 11 P 28 ;
;------------------------------;
;Turn a Segment On and Off --- Flash it!
SEGFLH:               
            LD      A,0FFH 
            OUT     (02),A    ;All Segments on
SEGF1:
            LD      A,01H 
            OUT     (01),A    ;Activate Segment
            CALL    DELAY_M
            XOR     A
            OUT     (01),A    ;Deactivate Segment
            CALL    DELAY_M
            CALL    CHKSHIFT
            JR      SEGF1

;---------------------------------------;
;Segment Move Around #1 - Issue 11 P 29 ;
;---------------------------------------;
;Move A Segment Around all Seven Segment Displays in a Anticlockwise Direction
SEGRND1:               
            LD      A,01H  ;Move from Right to Left
            OUT     (02),A
            LD      C,06H  
            LD      A,01H 
SEGR11:
            OUT     (01),A
            LD      B,A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            LD      A,B
            RLC     A
            DEC     C
            JR      NZ, SEGR11

            LD      A,02H  ;Move Down
            OUT     (02),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            LD      A,40H
            OUT     (02),A
            CALL    DELAY_Q
            CALL    CHKSHIFT

            LD      A,80H  ;Move From Left to Right
            OUT     (02),A
            LD      C,06H  
            LD      A,20H 
SEGR12:
            OUT     (01),A
            LD      B,A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            LD      A,B
            RRC     A
            DEC     C
            JR      NZ, SEGR12
            
            LD      A,20H ;Move Up
            OUT     (02),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            LD      A,08H
            OUT     (02),A
            CALL    DELAY_Q
            CALL    CHKSHIFT

            JR      SEGRND1

;---------------------------------------;
;Segment Move Around #2 - Issue 12 P 16 ;
;---------------------------------------;
;Move A Segment Around a single Seven Segment Display (hard coded)
SEGRND2:               
            LD      A,3FH 
            OUT     (01),A ;First Display
            LD      A,01H  ;Hard code segment positions
            CALL    SEGR21
            LD      A,02H
            CALL    SEGR21
            LD      A,04H
            CALL    SEGR21
            LD      A,20H
            CALL    SEGR21
            LD      A,80H
            CALL    SEGR21
            LD      A,40H
            CALL    SEGR21
            LD      A,04H
            CALL    SEGR21
            LD      A,08H
            CALL    SEGR21
            JR      SEGRND2
SEGR21:
            OUT     (02),A
            CALL    DELAY_M
            CALL    CHKSHIFT
            RET

;---------------------------------------;
;Segment Move Around #3 - Issue 12 P 17 ;
;---------------------------------------;
;Move A Segment Around a single Seven Segment Display (using lookup table)
SEGRND3:               
            LD      C,20H
SEGR31:
            LD      A,C 
            OUT     (01),A
            CALL    SEGLKP
            RRC     C
            BIT     7,C
            JR      Z,SEGR31
            JR      SEGRND3
SEGLKP:
            LD      HL,SEGTAB ;Table start address
            LD      B,09H     ;Size of table
SEGR32:
            LD      A,(HL)
            OUT     (02),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            INC     HL
            DEC     B
            JP      NZ,SEGR32
            RET
SEGTAB:
            DB      01H,02H,04H,20H,80H,40H,04H,08H,01H

;---------------------------------------;
;Segment Back and Forth - Issue 11 P 28 ;
;---------------------------------------;
;Move A Segment From Right to Left and Back
SEGBAF:               
            LD      A,01H 
            OUT     (02),A 
SEGB1:               
            OUT     (01),A 
            CALL    DELAY_M 
            RLCA
            BIT     6,A       ;On Left Edge? 
            CALL    CHKSHIFT
            JR      Z,SEGB1
SEGB2:
            RRCA
            OUT     (01),A
            CALL    DELAY_M
            BIT     0,A       ;On Right Edge?
            JR      Z,SEGB2
            CALL    CHKSHIFT
            JR      SEGB1

;------------------------------------------------------;
;Segment Back and Forth using keybaord - Issue 12 P 17 ;
;------------------------------------------------------;
;Move A Segment From Right to Left and Back using Keyboard.  '4' - Left and 'C' - Right

SEGKBD:               
            LD      A,04H
            OUT     (02),A
            LD      B,A
SEGK1:
            LD      A,B
            OUT     (01),A
SKEYWAIT:
            RST     08H  ;Get Key input
            CALL    CHKSHIFT
SLEFT:
            CP      04H  ;'4' key
            JR      NZ,SRIGHT
            RLC     B    ; Move left
            JR      SEGK1
SRIGHT:
            CP      0CH  ;'C' key
            JR      NZ,SKEYWAIT
            RRC     B    ; Move right
            JR      SEGK1

;---------------------------------------------------------------;
;Segment Back and Forth with RUN using keybaord - Issue 12 P 18 ;
;---------------------------------------------------------------;
; Move Segment With the Keyboard with Auto move. '+' - Left, '4' - Right
SEGKBR:               
            LD      A,01H 
            OUT     (02),A 
            OUT     (01),A
            LD      B,A
SEGKR1:
            RST     20H
            JR      Z,SRLEFT    ;key Pressed
            LD      A,C  ;Previous if a invalid
SRLEFT:
            CP      10H
            JR      NZ,SRRIGHT
            RLC     B
            JR      SRMOVE
SRRIGHT:
            CP      04H
            JR      NZ,SEGKR1
            RRC     B
SRMOVE:
            LD      C,A      ;Store current direction (key)
            LD      A,B
            OUT     (01),A
            CALL    DELAY_M
            CALL    CHKSHIFT
            JR      SEGKR1

;---------------------------------------------;
;Display two Segments at once - Issue 12 P 18 ;
;---------------------------------------------;
; Display 2 segments at the same time (multiplexing)
SEGTWO:     	
			LD     C,05H
SEGT1:
			LD     A,01H
			OUT    (01),A
			LD     A,0C6H  ;T
			OUT    (02),A
			CALL   DELAY_Q
			CALL   CHKSHIFT
			CALL   SECOND
			DEC    C
			JR     NZ,SEGT1

			LD     C,05H
SEGT2:
			LD     A,01H
			OUT    (01),A
			LD     A,0C7H  ;E
			OUT    (02),A
			CALL   DELAY_Q
			CALL   CHKSHIFT
			CALL   SECOND
			DEC    C
			JR     NZ,SEGT2

			LD     C,05H
SEGT3:
			LD     A,01H
			OUT    (01),A
			LD     A,0C3H  ;C
 			OUT    (02),A
			CALL   DELAY_Q
			CALL   CHKSHIFT
			CALL   SECOND
			DEC    C
			JR     NZ,SEGT3
			JR     SEGTWO
SECOND:                       ;Second Segment
			LD     A,20H
			OUT    (01),A
			LD     A,80H
			OUT    (02),A
			CALL   DELAY_Q
			CALL   CHKSHIFT
			RET

;-------------------------------;
;8x8 LED Around - Issue 11 P 33 ;
;-------------------------------;
;Move an 8x8 LED around the perimeter of the display
LEDRND:               
            LD      A,01H   ;Bottom Left to Right
            OUT     (06),A
            LD      C,08H
            LD      A,01H
LEDR1:
            OUT     (05),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            RLCA
            DEC     C
            JR      NZ,LEDR1

            LD      A,80H  ;Right Bottom to Top
            OUT     (05),A
            LD      C,07H
            LD      A,02H
LEDR2:
            OUT     (06),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            RLCA
            DEC     C
            JR      NZ,LEDR2

            LD      A,80H ;Top Right to Left
            OUT     (06),A
            LD      C,07H
            LD      A,40H
LEDR3:
            OUT     (05),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            RRCA
            DEC     C
            JR      NZ,LEDR3

            LD      A,01H ;Left Top to Bottom
            OUT     (05),A
            LD      C,07H
            LD      A,40H
LEDR4:
            OUT     (06),A
            CALL    DELAY_Q
            CALL    CHKSHIFT
            RRCA
            DEC     C
            JR      NZ,LEDR4

            JR      LEDRND

;---------------------------------------;
;8x8 LED Back and Forth - Issue 11 P 33 ;
;---------------------------------------;
;Move an 8x8 LED from Left to Right and Increase in depth
LEDBAF:
            LD      H,01H
LEDB1:               
            LD      A,H 
            OUT     (05),A
            LD      C,08H
            LD      A,01H
LEDB2:
            OUT     (06),A
            CALL    DELAY_F
            CALL    CHKSHIFT
            RLCA             ;Move Upwards
            DEC     C
            JR      NZ,LEDB2

            LD      C,08H
            LD      A,80H
LEDB3: 
            OUT     (06),A
            CALL    DELAY_F
            CALL    CHKSHIFT
            RRCA             ;Move Across
            DEC     C
            JR      NZ,LEDB3

            INC     H        ;Increase Binary view by one
            JR      LEDB1

;-----------------------------------;
;8x8 LED Fan Out #1 - Issue 11 P 34 ;
;-----------------------------------;
;Fan out the LEDs from bottom left to top right
LEDFN1:
            LD      A,01H
LEDF11:               
            OUT     (05),A
            OUT     (06),A
            RLCA             ;Move A one bit to the left
            CALL    DELAY_Q
            CALL    CHKSHIFT
            INC     A        ;Add one (or set bit 0), This will fill A with bits
            JR      NZ,LEDF11
            JR      LEDFN1

;---------------------------------------;
;8x8 LED Mystery Effect - Issue 11 P 34 ;
;---------------------------------------;
;LED Mystery Effect!!!
LEDMYS:
            LD      C,20H
            LD      A,01H
            OUT     (05),A
            LD      A,01H
LEDM1:               
            OUT     (06),A
            RLCA            ;Move Up 
            CALL    LEDMOV
            DEC     C
            JR      NZ,LEDM1

            LD      C,20H
            LD      A,01H
            OUT     (06),A
            LD      A,01H
LEDM2:               
            OUT     (05),A
            RLCA            ;Move Across
            CALL    LEDMOV
            DEC     C
            JR      NZ,LEDM2

            LD      C,20H
            LD      A,01H
LEDM3:               
            OUT     (05),A
            OUT     (06),A
            RLCA            ;Move Up and Across
            CALL    LEDMOV
            DEC     C
            JR      NZ,LEDM3
            JR      LEDMYS
LEDMOV:
            CALL    DELAY_Q
            CALL    CHKSHIFT     
            INC     A
            BIT     0,A
            JR      Z, LEDM4            
            RET
LEDM4:
            CALL    DELAY_Q
            CALL    CHKSHIFT     
			CALL    DELAY_Q
            CALL    CHKSHIFT     
            JR      LEDMOV

;-------------------------------------;
;8x8 LED Key Movement - Issue 11 P 36 ;
;-------------------------------------;
;LED Keyboard Movement Routine. Use '-','5','2' and '0' Keys to move an LED light around
LEDKBD:
            LD      BC,0101H
            LD      A,B
            OUT     (05),A
            LD      A,C
            OUT     (06),A
LKEYWAIT:
            RST     08H
            CALL    CHKSHIFT     
LLEFT:
            CP      11H       ;'-' Key Left
            JR      NZ, LRIGHT
            RRC     B
            JR      UPDATEX
LRIGHT:
            CP      05H       ;'5' Key Right
            JR      NZ, LUP
            RLC     B
UPDATEX:
            LD      A,B
            OUT     (05),A
            JR      LKEYWAIT
LUP:
            CP      02H       ;'2' Key Left
            JR      NZ, LDOWN
            RLC     C
            JR      UPDATEY
LDOWN:
            CP      00H       ;'0' Key Right
            JR      NZ, LKEYWAIT
            RRC     C
UPDATEY:
            LD      A,C
            OUT     (06),A
            JR      LKEYWAIT

;------------------------------;
;Aliens Attack - Issue 11 P 36 ;
;------------------------------;
;Aliens Attack Sound Effect, Uses Self changing code
ETATTC:
            LD      HL,ET3+1  ;Updates DE data in code!
            LD      A,01H
            LD      (HL),A
            LD      B,30H
ET1:
            CALL    ET5       ;Play Sound
            INC     (HL)
            DJNZ    ET1
            JR      ETATTC
ET2:		;SOUND  Delay
            PUSH    AF
            PUSH    DE
ET3:
			LD      DE,0020H
ET4:
			DEC     DE
			LD      A,D
			OR      E
			JR      NZ,ET4
			POP     DE
			POP     AF
			CALL    CHKSHIFT
			RET
ET5:        ;SOUND Play
			PUSH    AF
			PUSH    BC
			LD      BC,00AAH
ET6:
			LD      A,80H
			OUT     (01),A
			LD      A,00H
			OUT     (01),A
			CALL    ET2
			DEC     BC
			LD      A,B
			OR      C
			JR      NZ,ET6
			POP     BC
			POP     AF
			RET

;---------------------------;
;Oscillator - Issue 12 P 22 ;
;---------------------------;
;Oscilate the Speaker
OSCLAT:     	
            LD     A,80H
            OUT    (01),A
            CALL   DELAY_F
			CALL   CHKSHIFT
            LD     A,00H
            OUT    (01),A
            CALL   DELAY_F
			CALL   CHKSHIFT
            JR     OSCLAT

;--------------------------------;
;Frequency Sweep - Issue 12 P 22 ;
;--------------------------------;
;Sweep through different Frequencies
FREQSP:     	
            LD     H,0FFH
            LD     B,H
FRQ1:
            LD     A,00H  ;Turn off
            OUT    (01),A
            LD     A,80H  ;Turn on
            OUT    (01),A
            LD     A,B
FRQ2:
            DEC    A      ;Quicken Delay
            JR     NZ,FRQ2
			CALL   CHKSHIFT 
            DJNZ   FRQ1

            LD     B,00H
FRQ3:
            LD     A,00H  ;Turn off
            OUT    (01),A
            LD     A,80H  ;Turn on
            OUT    (01),A
            INC    B      ;Longer Delay
            LD     A,B
FRQ4:
            DEC    A
            JR     NZ,FRQ4
            LD     A,H
            SUB    B
			CALL   CHKSHIFT
            JR     NZ,FRQ3
            JR     FREQSP

;---------------------------;
;Quick Draw - Issue 12 P 21 ;
;---------------------------;
;Who can press the key faster, When the letter 'G' is shown, Player 1 uses the '+' key
;and Player 2 uses the 'C' key. Press any button to reset or Shift 'GO' to exit
QKDRAW:               
            XOR     A 
            OUT     (01),A
            CALL    DELAY_FULL
            LD      A,0E3H   ;G Letter
            OUT     (02),A 
            LD      A,08H 
            OUT     (01),A 
QKDL1:               
            RST     08H      ;Wait and Get Input
            CP      0CH      ;If C is pressed Jump Right
            JR      Z,QKDRT
            CP      10H      ;If + is pressed Jump Left
            JR      Z,QKDLT   
            JR      QKDL1 
QKDRT:               
            LD      A,01H    ;Right Segment
            JR      QDEND 
QKDLT:                
            LD      A,20H    ;Left Segment
QDEND:                 
            OUT     (01),A 
            LD      A,28H 
            OUT     (02),A 
            RST     08H      ;Wait and Get Input
            CALL    CHKSHIFT     
            JR      QKDRAW 

;--------------------------;
;TEC Clock - Issue 12 P 23 ;
;--------------------------;
;A Real time Clock.  Works well with Crystal Oscillator set at 3.5795 MHz
;Initial Time set at 12:00:00.  Uses 0D00 - 0D09 for display and clock data
CLKSCN:     EQU     0D00H      ;Screen Display Start
CLKSCN_E:   EQU     CLKSCN+6   ;Screen Display End
CLKDATA:    EQU     0D07H      ;Time Data
TECCLK:
            LD      A,00H        ;Set Time to 12:00:00 
            LD      (CLKDATA),A 
            LD      (CLKDATA+1),A 
            LD      A,12H 
            LD      (CLKDATA+2),A 

CLKLOOP:               
            LD      IY,CLKDATA 
            LD      B,02H 
CLK1:               
            LD      A,(IY+0)   ;Convert Seconds and Minutes
            ADD     A,01H      ;Increase by 1 Second
            DAA      
            CP      60H        ;Reset at 60
            JR      NZ,CLKDIS  ;If not 60 seconds then display clock
            XOR     A          ;Set Min / Sec to 0
            LD      (IY+0),A   ;Save updated value
            INC     IY         ;Inc from Sec to Min to Hour
            DJNZ    CLK1       ;If here update minutes
            LD      A,(IY+0)   ;Convert Hours
            ADD     A,01H      ;Increase hours by one
            DAA      
            CP      24H        ;Reset at 24
            JR      NZ,CLKDIS  ;If not 24 then update clock
            XOR     A          ;Set Hour to 0
CLKDIS:                        ;Display the Clock screen
            LD      (IY+0),A   ;Save update value
            LD      B,03H 
            LD      HL,CLKSCN_E  ;Work backwards from S->M->H
            LD      IX,CLKDATA 
CLK2:               
            LD      A,(IX+0)   ;Get Clock data (H/M/S)
            INC     IX 
            PUSH    BC 
            PUSH    AF 
            AND     0FH        ;Convert low nibble from hex to seven segment
            LD      B,A 
            CALL    TBLLOOKUP  ;Convert and update display at HL
            POP     AF 
            SRL     A          ;Now get the high nibble
            SRL     A 
            SRL     A 
            SRL     A 
            LD      B,A 
            CALL    TBLLOOKUP  ;Convert and update display at HL
            POP     BC 
            DJNZ    CLK2       ;Do for S, M, then H
            LD      B,0FCH 
CLK3:                          ;Multiplex the Screen
            LD      IX,CLKSCN 
            PUSH    BC 
            LD      B,07H 
            LD      C,40H      ;Start from Left (Hr) and go to right (Sec)
CLK4:               
            LD      A,(IX+0) 
            OUT     (02),A 
            LD      A,C 
            OUT     (01),A 
            SRL     C          ;Move to next segment
            XOR     A 
            LD      E,39H      ;Timing to keep display on for 1 second
CLK5:               
            DEC     E 
            JR      NZ,CLK5 
            OUT     (01),A     ;Clear screen
            INC     IX 
            DJNZ    CLK4 
            POP     BC
            CALL    CHKSHIFT 
            DJNZ    CLK3 
            JP      TIMEDELAY  ;More delay for one second display
TBLLOOKUP:                     ;Convert Hex to Seven Segment
            LD      DE,PATTERN 
            PUSH    AF 
            LD      A,E 
            ADD     A,B 
            LD      E,A 
            LD      A,(DE) 
            LD      (HL),A 
            DEC     HL 
            POP     AF 
            RET      
PATTERN:                       ;0-9 in seven segments
            DB      0EBH,28H,0CDH,0ADH,2EH,0A7H,0E7H,29H,0EFH,0AFH 
TIMEDELAY:           
            LD      B,37H      ;Timing to keep display on for 1 second 
CLK6:               
            DJNZ    CLK6
            JP      CLKLOOP 

;------------------;
; Utility Routines ;
;------------------;
;The following are general utility routines that are used across all programs

;General Delay Routine, Fast Timer Delay
DELAY_F:               
            PUSH    BC 
            LD      B,10H
            JR      DELAY
;General Delay Routine, Quick Timer Delay
DELAY_Q:               
            PUSH    BC 
            LD      B,20H
            JR      DELAY
;General Delay Routine, Mid Timer Delay
DELAY_M:               
            PUSH    BC 
            LD      B,55H 
            JR      DELAY

;Delay Routine (Actual)
DELAY: 
            LD      C,0FFH 
D1:                  
            DEC     C 
            JR      NZ,D1 
            DJNZ    DELAY
            POP     BC 
            RET       

;General Delay Routine, Full 16 byte Delay
DELAY_FULL:
            LD      DE,0000H 
D3:               
            DEC     DE 
            LD      A,D 
            OR      E 
            JR      NZ,D3
            RET 

;Menu Return checks if a Shift 'Go' has been pressed.  If so then jump back to action
CHKSHIFT:
            PUSH    AF
            IN      A,(03)   ;Check for key pressed
            BIT     6,A
            JR      NZ,CHKS1 ;Exit if no key pressed
            IN      A,(00)   ;Get actual key
            BIT     5,A      ;Has shift been pressed?
            JR      NZ,CHKS1 ;Exit if shift not pressed
            AND     1FH      ;Mask unwanted bits
            CP      12H      ;"GO" pressed
            JR      NZ,CHKS1       
            POP     BC       ;Fake POP to remove PC as we aren't returning
            JP      MENU     ;GOTO Menu
CHKS1:
            POP     AF
            RET

;Menu Command String
M_DATA:
            DB      0xFF,0xFF ; Blank
            DB      0x00,0x13 ; First menu item and number of menu items, = 20
            DW      MENU_JP_TBL ; Jump table for menu items
            DW      MENU_AD_TBL ; Menu Address LED display table
            DW      MENU_DA_TBL ; Menu Data LED display table
            DB      0xC9 ; return (unused)

MENU_JP_TBL:        ; Menu Jump table
                    ; Seven Segment Routines 
            JP      SEGMOV  ; Segment Move
            JP      SEGCYC  ; Segment Cycle
            JP      SEGFLH  ; Segment Flash
            JP      SEGRND1 ; Segment Around #1
            JP      SEGRND2 ; Segment Around #2
            JP      SEGRND3 ; Segment Around #3
            JP      SEGBAF  ; Segment B & F
            JP      SEGKBD  ; Segment Keyboard Move
            JP      SEGKBR  ; Segment Keyboard Move with Run
            JP      SEGTWO  ; Segment display two

                    ; 8x8 LED Routines 
            JP      LEDRND  ; 8x8 LED Around
            JP      LEDBAF  ; 8x8 LED B & F
            JP      LEDFN1  ; 8x8 LED Fanout #1
            JP      LEDMYS  ; 8x8 LED Mystery Effect
            JP      LEDKBD  ; 8x8 LED Keyboard Move

                    ; Sound Routines
            JP      ETATTC  ; Aliens Attack Sound
            JP      OSCLAT  ; Oscilate the Speaker
            JP      FREQSP  ; Frequency Sweep

                    ; Other Routines
            JP      QKDRAW  ; Quick Draw
            JP      TECCLK  ; TEC Clock

MENU_AD_TBL:        ; Menu Display for ADDRESS LEDs
                    ; Seven Segment Routines 
            DB      0xA7,0xC7,0xE3,0xA7 ; "SEGS"
            DB      0xA7,0xC7,0xE3,0xC3 ; "SEGC"
            DB      0xA7,0xC7,0xE3,0x47 ; "SEGF"
            DB      0xA7,0xC7,0xE3,0x44 ; "SEGr"
            DB      0xA7,0xC7,0xE3,0x44 ; "SEGr"
            DB      0xA7,0xC7,0xE3,0x44 ; "SEGr"
            DB      0xA7,0xC7,0xE3,0xE6 ; "SEGb"
            DB      0xA7,0xC7,0xE3,0x67 ; "SEGK"
            DB      0xA7,0xC7,0xE3,0x67 ; "SEGK"
            DB      0xA7,0xC7,0xE3,0xC6 ; "SEGt"

                    ; 8x8 LED Routines 
            DB      0xC2,0xC7,0xEC,0x44 ; "LEdr"
            DB      0xC2,0xC7,0xEC,0xE6 ; "LEdb"
            DB      0xC2,0xC7,0xEC,0x47 ; "LEdF"
            DB      0xC2,0xC7,0xEC,0xC7 ; "LEdE"
            DB      0xC2,0xC7,0xEC,0x67 ; "LEdK"

                    ; Sound Routines
            DB      0xC7,0xC6,0x6F,0xC6 ; "EtAt"
            DB      0xEB,0xA7,0xC3,0xC2 ; "OSCL"
            DB      0x47,0x44,0xC7,0x3F ; "FREq"

                    ; Other Routines
            DB      0x3F,0xEA,0xEC,0x44 ; "qUdr"
            DB      0xC6,0xC7,0xC3,0xC3 ; "tECC"

MENU_DA_TBL:        ; Menu Display for DATA LEDs
                    ; Seven Segment Routines 
            DB      0x47,0xC6 ; "Ft"
            DB      0xAE,0xC3 ; "yC"
            DB      0xC2,0x6E ; "LH"
            DB      0xEC,0x28 ; "d1"
            DB      0xEC,0xCD ; "d2"
            DB      0xEC,0xAD ; "d3"
            DB      0x6F,0x47 ; "AF"
            DB      0xE6,0xEC ; "bd"
            DB      0xE6,0x44 ; "br"
            DB      0xE1,0xEB ; "wO"

                    ; 8x8 LED Routines 
            DB      0x6B,0xEC ; "nd"
            DB      0x6F,0x47 ; "AF"
            DB      0x6B,0x28 ; "n1"
            DB      0x47,0x47 ; "FF"
            DB      0xE6,0xEC ; "bd"

                    ; Sound Routines 
            DB      0xC6,0xC3 ; "tC"
            DB      0x6F,0xC6 ; "At"
            DB      0xA7,0x4F ; "SP"

                    ; Other Routines 
            DB      0x6F,0xE1 ; "Aw"
            DB      0xC2,0x67 ; "Lk"
